{"version":3,"sources":["data.js","components/Drumpad.js","components/Display.js","components/Container.js","App.js","serviceWorker.js","index.js"],"names":["drumPadData","keyCode","keyTrigger","audioClip","id","type","Drumpad","componentDidMount","document","addEventListener","handleKeyPress","componentWillUnmount","playAudio","key","audio","getElementById","props","updateDisplay","clipId","replace","play","e","className","this","onClick","src","Component","Display","display","Container","displayName","data","map","i","App","state","setState","displayClipName","name","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a8f2add3.chunk.js","sourcesContent":["const drumPadData = [\n    {\n        keyCode: 81,\n        keyTrigger: 'Q',\n        audioClip: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3',\n        id: 'Heater-1',\n        type: 'audio/mpeg'\n    },\n    {\n        keyCode: 87,\n        keyTrigger: 'W',\n        audioClip: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3',\n        id: 'Heater-2',\n        type: 'audio/mpeg'\n    },\n    {\n        keyCode: 69,\n        keyTrigger: 'E',\n        audioClip: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3',\n        id: 'Heater-3',\n        type: 'audio/mpeg'\n    },\n    {\n        keyCode: 65,\n        keyTrigger: 'A',\n        audioClip: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3',\n        id: 'Heater-4',\n        type: 'audio/mpeg'\n    },\n    {\n        keyCode: 83,\n        keyTrigger: 'S',\n        audioClip: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3',\n        id: 'Clap',\n        type: 'audio/mpeg'\n    },\n    {\n        keyCode: 68,\n        keyTrigger: 'D',\n        audioClip: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3',\n        id: 'Open-HH',\n        type: 'audio/mpeg'\n    },\n    {\n        keyCode: 90,\n        keyTrigger: 'Z',\n        audioClip: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3',\n        id: \"Kick-n'-Hat\",\n        type: 'audio/mpeg'\n    },\n    {\n        keyCode: 88,\n        keyTrigger: 'X',\n        audioClip: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3',\n        id: 'Kick',\n        type: 'audio/mpeg'\n    },\n    {\n        keyCode: 67,\n        keyTrigger: 'C',\n        audioClip: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3',\n        id: 'Closed-HH',\n        type: 'audio/mpeg'\n    },\n]\n\nexport default drumPadData","import React, { Component } from 'react'\nimport '../App.css'\n\nexport class Drumpad extends Component {\n\n    componentDidMount = () => {\n        document.addEventListener('keydown', this.handleKeyPress);\n    }\n\n    componentWillUnmount = () => {\n        document.addEventListener('keydown', this.handleKeyPress);\n    }\n\n    playAudio = (key) => {\n        const audio = document.getElementById(key)\n        this.props.updateDisplay(this.props.clipId.replace(/-/g, ' '));\n        return audio.play()\n    }\n\n    handleKeyPress = (e) => {\n        if (e.keyCode === this.props.keyCode) {\n            this.playAudio(this.props.keyTrigger);\n        }\n    }\n\n    render() {\n        return (\n            <div\n                className=\"drum-pad\"\n                id={this.props.clipId}\n                onClick={() => this.playAudio(this.props.keyTrigger)}>\n                <audio\n                    className=\"clip\"\n                    id={this.props.keyTrigger}\n                    src={this.props.audioClip}\n                    type={this.props.type}\n                />\n                {this.props.keyTrigger}\n            </div>\n        )\n    }\n}\n\nexport default Drumpad","import React from 'react'\nimport \"../App.css\"\n\nexport const Display = ({display}) => {\n    return (\n        <div>\n            <p>{display}</p>\n        </div>\n    )\n}\n\nexport default Display","import React from 'react'\nimport DrumPad from './Drumpad'\nimport Display from './Display'\nimport \"../App.css\"\n\nexport const Container = ({displayName, updateDisplay, data}) => {\n    return (\n        <div className=\"drum-pad-container\">\n            <Display\n                display={displayName}\n            />\n            <div className=\"drum-pad-row\">\n            {\n                data.map(({ keyTrigger, audioClip, type, id, keyCode }, i) => {\n                    return (\n                        <div key={i}>\n                            <DrumPad\n                                clipId={id}\n                                keyTrigger={keyTrigger}\n                                audioClip={audioClip}\n                                type={type}\n                                keyCode={keyCode}\n                                updateDisplay={updateDisplay}\n                            />\n                        </div>\n\n                    )\n                })\n            }\n            </div>\n        </div>\n    )\n}\n\nexport default Container;","import React, { Component } from 'react';\nimport './App.css';\nimport drumPadData from './data'\nimport Container from './components/Container'\n\n\n\n\nclass App extends Component {\n    state = {\n        data: [],\n        display: 'John smith',\n    }\n\n    componentDidMount = () => {\n        this.setState({\n            data: drumPadData\n        })\n    }\n    componentWillUnmount = () => {\n        this.setState({\n            data: []\n        })\n    }\n\n    displayClipName = (name) => {\n        this.setState({\n            display: name\n        });\n    }\n\n\n\n    render() {\n\n        return (\n            <div className=\"layout-container\">\n                <div id=\"drum-machine\">\n                    <div id=\"display\">\n                        <h2>DjBooth</h2>\n                        <Container \n                            data={this.state.data}\n                            displayName={this.state.display}\n                            updateDisplay={this.displayClipName} />\n                    </div>\n                </div>\n            </div>\n        );\n    };\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}